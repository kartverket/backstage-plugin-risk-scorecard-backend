name: Build and deploy RiSC-plugin backend
on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Commit hash to deploy'
        default: ''
        type: string
      dev:
        description: 'Deploy to dev'
        required: true
        type: boolean
      sandbox:
        description: 'Deploy to sandbox'
        required: true
        type: boolean
      prod:
        description: 'Deploy to prod'
        required: true
        type: boolean
  pull_request:
    types:
      - opened
      - ready_for_review
      - reopened
      - synchronize
    branches:
      - main
    paths:
      - Dockerfile
      - build.gradle.kts
      - src/**
      - .github/workflows/build-and-deploy-to-skip.yml
      - gradle/wrapper/gradle-wrapper.properties
  push:
    paths:
      - Dockerfile
      - build.gradle.kts
      - src/**
      - .github/workflows/build-and-deploy-to-skip.yml
      - gradle/wrapper/gradle-wrapper.properties
    branches:
      - main

permissions:
  id-token: write
  contents: write

env:
  REGISTRY: ghcr.io
  ARGO_VERSION_FILE: image-url-ros-plugin-backend
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: Build and push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      image_url: ${{ steps.setOutput.outputs.image_url }}

    steps:
      - name: Checkout code
        if: ${{ github.event_name != 'workflow_dispatch' || (github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha == '') }}
        uses: actions/checkout@v4

      - name: Checkout code
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha != '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout specific commit
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.commit_sha != '' }}
        run: git checkout ${{ github.event.inputs.commit_sha }}

      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '23'
          architecture: 'x64'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v3

      - name: Execute Gradle build
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test

      - name: Set tag
        id: set-tag
        env:
          BRANCH: ${{ github.ref_name }}
        run: |
          if [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
            echo "image_tag=latest" >> $GITHUB_OUTPUT
          else
            echo "image_tag=prebuild-temp" >> $GITHUB_OUTPUT
          fi

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=${{ steps.set-tag.outputs.image_tag }}

      - name: Build docker and push
        id: build-docker
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ !github.event.pull_request.draft }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Set output with build values
        id: setOutput
        run: |
          echo "image_url=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build-docker.outputs.digest }}" >> $GITHUB_OUTPUT  

  pharos:
    name: Run Pharos on docker image
    if: ${{ !github.event.pull_request.draft }}
    needs: build
    permissions:
      actions: read
      packages: read
      contents: read
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - name: "Run Pharos"
        uses: kartverket/pharos@v0.3.1
        with:
          image_url: ${{ needs.build.outputs.image_url }}
          # Backstage config files are misclassified as kubernetes config files, resulting in false security issues
          skip_dirs: '.security/.backstage/component,.security/.backstage/system'

  dev-deploy-argo:
    name: Deploy to atgcp1-dev
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: dev
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: ros-plugin-backend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-dev/ros-plugin-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Backstage Plugin Risk Scorecard Backend CI"
          git commit -am "Update Risk Scorecard Backend"
          git push

  prod-deploy-argo:
    name: Deploy to atgcp1-prod
    if: github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: prod
    permissions:
      id-token: write
    steps:
      - uses: octo-sts/action@6177b4481c00308b3839969c3eca88c96a91775f # v1.0.0
        id: octo-sts
        with:
          scope: kartverket/skvis-apps
          identity: ros-plugin-backend
      - name: Checkout skvis-apps
        uses: actions/checkout@v4
        with:
          repository: kartverket/skvis-apps
          ref: main
          token: ${{ steps.octo-sts.outputs.token }}
      - name: Update version
        run: |
          echo "\"${{ needs.build.outputs.image_url }}\"" > "env/atgcp1-prod/ros-plugin-main/${{ env.ARGO_VERSION_FILE }}"
          git config --global user.email "noreply@kartverket.no"
          git config --global user.name "Backstage Plugin Risk Scorecard Backend CI"
          git commit -am "Update Risk Scorecard Backend"
          git push
